import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import time
import datetime

class StudyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sistema de Estudo")

        self.total_time = 0
        self.running = False
        self.start_time = 0

        # Cronômetro
        self.time_label = tk.Label(root, text="00:00:00", font=("Helvetica", 24))
        self.time_label.pack()

        self.start_button = tk.Button(root, text="Iniciar", command=self.start_timer)
        self.start_button.pack(side=tk.LEFT)

        self.stop_button = tk.Button(root, text="Parar", command=self.stop_timer)
        self.stop_button.pack(side=tk.LEFT)

        self.reset_button = tk.Button(root, text="Zerar", command=self.reset_timer)
        self.reset_button.pack(side=tk.LEFT)

        # Tabela de dias e materiais
        self.table_frame = tk.Frame(root)
        self.table_frame.pack()

        self.table = ttk.Treeview(self.table_frame, columns=("Dia", "Material"), show="headings")
        self.table.heading("Dia", text="Dia da Semana")
        self.table.heading("Material", text="Material de Estudo")
        self.table.pack()

        for day in ["Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado", "Domingo"]:
            self.table.insert("", "end", values=(day, ""))

        # Campo de Anotações
        self.notes_label = tk.Label(root, text="Anotações:")
        self.notes_label.pack()
        self.notes_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=40, height=10)
        self.notes_text.pack()

        # Calculadora
        self.calc_label = tk.Label(root, text="Calculadora:")
        self.calc_label.pack()

        self.calc_entry = tk.Entry(root)
        self.calc_entry.pack()

        self.calc_button = tk.Button(root, text="Calcular", command=self.calculate)
        self.calc_button.pack()

        self.calc_result_label = tk.Label(root, text="")
        self.calc_result_label.pack()

        # Botão "Criar Peça"
        self.create_button = tk.Button(root, text="Criar Peça", command=self.create_piece)
        self.create_button.pack()

        # Guia de notícias
        self.news_label = tk.Label(root, text="Guia de Notícias:")
        self.news_label.pack()

        self.news_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=40, height=10)
        self.news_text.pack()

        self.fetch_news_button = tk.Button(root, text="Atualizar Notícias", command=self.fetch_news)
        self.fetch_news_button.pack()

        # Relatório
        self.report_button = tk.Button(root, text="Gerar Relatório", command=self.generate_report)
        self.report_button.pack()

    def start_timer(self):
        if not self.running:
            self.start_time = time.time()
            self.running = True
            self.update_timer()

    def stop_timer(self):
        if self.running:
            self.total_time += time.time() - self.start_time
            self.running = False

    def reset_timer(self):
        self.total_time = 0
        self.running = False
        self.time_label.config(text="00:00:00")

    def update_timer(self):
        if self.running:
            elapsed_time = time.time() - self.start_time + self.total_time
            self.time_label.config(text=time.strftime('%H:%M:%S', time.gmtime(elapsed_time)))
            self.root.after(1000, self.update_timer)

    def calculate(self):
        try:
            result = eval(self.calc_entry.get())
            self.calc_result_label.config(text=str(result))
        except:
            messagebox.showerror("Erro", "Expressão inválida!")

    def create_piece(self):
        messagebox.showinfo("Criar Peça", "Peça criada com sucesso!")

    def fetch_news(self):
        # Simulação de atualização de notícias
        news_content = "Notícia 1: Importante evento ocorreu...\nNotícia 2: Nova descoberta científica..."
        self.news_text.delete(1.0, tk.END)
        self.news_text.insert(tk.INSERT, news_content)

    def generate_report(self):
        report = f"Tempo total de estudo: {datetime.timedelta(seconds=int(self.total_time))}\n"
        report += "Anotações:\n" + self.notes_text.get(1.0, tk.END)
        messagebox.showinfo("Relatório", report)


if __name__ == "__main__":
    root = tk.Tk()
    app = StudyApp(root)
    root.mainloop()
